# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '64102e44-2b88-49cb-99b1-ca23663d8fa1'
  imageRepository: 'sakethrampurushottamaobmovies'
  containerRegistry: 'obmoviesacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'obmoviesacr10891139-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest
    - task: CopyPublishBuildArtifacts@1
      inputs:
        Contents: 'deployment.yaml'
        ArtifactName: 'manifests'
        ArtifactType: 'Container'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'Sakethrampurushottamaobmovies-3362.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
                
            
            
            
            
            
            
             - task: HelmInstaller@0
                displayName: 'Install Helm $(HelmVersion)'
                inputs:
                  helmVersion: $(HelmVersion)
                  checkLatestHelmVersion: false
                  installKubectl: true
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))   
      
            - task: HelmDeploy@0
              displayName: 'helm package'
              inputs:
                azureSubscriptionEndpoint: $(AzureSubscription)
                azureResourceGroup: $(ClusterResourceGroup)
                kubernetesCluster: $(KubernetesCluster)
                command: 'package'
                chartPath: $(ChartPath)
                chartVersion: $(Build.BuildNumber)
                save: false
                namespace: '$(K8sNamespace)'
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))   

            - task: HelmDeploy@0
              displayName: 'Helm upgrade release'
              inputs:
                connectionType: 'Azure Resource Manager'
                azureSubscription: $(AzureSubscription)
                azureResourceGroup: '$(ClusterResourceGroup)'
                kubernetesCluster: '$(KubernetesCluster)'
                useClusterAdmin: true
                namespace: '$(K8sNamespace)'
                command: 'upgrade'
                chartType: 'FilePath'
                chartPath: '$(ChartPackage)'
                releaseName: '$(ApiName)-$(K8sNamespace)'
                arguments: '--create-namespace'

